on_actions = {
	on_monthly = {
		effect = {
			if = {
				limit = {
					is_ai = yes
				}
				set_country_flag = open_buying_market_menu
				create_new_category_for_market_ai_version = yes
				### AI BUYING EQUIPMENT
				evaluate_behaviour = yes
				## INF EQUIPMENT DESIRE TO BUY
					## VARIABLE INF_EQUIPMENT_DESIRE
				## TANKS
					## VARIABLE TANK_EQUIPMENT_DESIRE
				## AIR
					## VARIABLE AIR_EQUIPMENT_DESIRE
				## NAVAL
					## VARIABLE NAVAL_EQUIPMENT_DESIRE
				## CUSTOM DESIRES
			}
		}
	}
	on_weekly = {
		effect = {
			if = {
				limit = {
					is_ai = yes
				}
				recalculate_maxium_stockpile = yes
			}
			if = {
				limit = {
					is_ai = yes
				}
				set_variable = {held_lowest_percentage_stockpile_amount = 0.001}
				for_each_loop = {
					array = current_selected_market_category_array
					value = item_to_buy
					index = current_index

					## compare to maxium amount
					set_temp_variable = {name_of_item_currently_selected = current_selected_market_category_array^i}
					set_temp_variable = {maxium_stockpile_amount = maxium_stockpile@var:item_to_buy}
					if = {
						limit = {
							NOT = {
								am_i_a_ship = yes
							}
						}
						set_temp_variable = {temp_equipment_in_stockpile = num_equipment@var:item_to_buy}
					}else = {
						if = {
							limit = {
								check_variable = {category_of_market_item@var:item_to_buy = global.corvette_identifier}
							}
							set_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@screen}
						}else_if = {
							limit = {
								check_variable = {category_of_market_item@var:item_to_buy = global.frigate_light_cruiser_identifier}
							}
							set_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@screen}
							if = {
								limit = {
									check_variable = {item_to_buy = token:quaser_1}
								}
								add_to_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@carrier}
							}
						}else_if = {
							limit = {
								check_variable = {category_of_market_item@var:item_to_buy = global.heavy_cruiser_identifier}
							}
							set_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@capital}
						}else = {
							set_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@capital}
							add_to_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@carrier}
						}
					}
					divide_temp_variable = {temp_equipment_in_stockpile = maxium_stockpile_amount}
					set_temp_variable = {maxium_stockpile_amount = 1}
					subtract_from_temp_variable = {maxium_stockpile_amount = temp_equipment_in_stockpile}
					set_temp_variable = {percentage_of_max_stockpile = maxium_stockpile_amount}
					set_variable_to_random = {
						var = random_error
						min = -0.003
						max = 0.003
						integer = no
					}
					## Introduce random probability in order for it to not always buy the same tank or airplane
					add_to_temp_variable = {percentage_of_max_stockpile = random_error}
					if = {
						limit = {
							check_variable = {held_lowest_percentage_stockpile_amount < percentage_of_max_stockpile}
						}
						set_variable = {held_lowest_percentage_stockpile_amount = percentage_of_max_stockpile}
						set_variable = {lowest_index_stockpile_amount = current_index}
					}
				}
			}
		}
	}
	on_daily = {
		effect = {
			## BUYING ITEMS TEST
			
			if = {
				limit = {
					is_ai = yes
				}
				# log = "[?current_selected_market_category_array^lowest_index_stockpile_amount.GetTokenKey]"
					## WE HAVE WORKED OUT LOWEST STOCKPILE, now we buy equipment

				set_temp_variable = {item_to_buy = current_selected_market_category_array^lowest_index_stockpile_amount}
				set_temp_variable = {amount_to_purchase = 1}
				set_temp_variable = {amount_checker = amount_to_purchase}
				if = {
					limit = {
						NOT = {
							am_i_a_ship = yes
						}
					}
					multiply_temp_variable = {amount_checker = 100}
				}
				if = {
					limit = {
						set_temp_variable = {money_to_pass = currency_amount^primary_currency}
						set_temp_variable = {total_price = global.price_of_item_@var:item_to_buy}
						multiply_temp_variable = {total_price = amount_to_purchase}
						check_variable = { money_to_pass > total_price}
						check_variable = {global.stock_of_item@var:item_to_buy > amount_checker}
						check_variable = {equipment_money_chest_amount > money_to_pass}
					}
					buy_item_scripted_effect = yes
				}
			}
		}
	}
}