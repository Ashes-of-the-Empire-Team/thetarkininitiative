on_actions = {
	on_startup = {
		effect = {
			ai_corp_set_tech_for_start = yes
		}
	}
	on_daily = { ## REEVALUATE PRODUCTION
		effect = {
			if = {
				limit = {
					check_variable = {light_ship_production_array^num > 0}
					is_ai = yes
				}
				## find highest need light_ship_one
				set_variable = {light_ship_workers = 25000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = ship_amount_contract_holder@var:light_ship_selected_item^num}
				for_each_loop = {
					array = light_ship_production_array
					value = item_to_look_for
					break = break
					index = current_index
					set_temp_variable = {grab_ship_number = light_ship_production_array^current_index}
					if = {
						limit = {
							check_variable = {ship_amount_contract_holder@var:grab_ship_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = ship_amount_contract_holder@var:grab_ship_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								NOT = {
									has_variable = light_ship_selected_item
								}
							}
						}
						set_variable = {light_ship_selected_item = light_ship_production_array^storing_current_index}
						set_variable = {light_selected_ship_to_be_reduced = global.ship_ic_holder@light_ship_selected_item}
						recalculate_light_ship_creation_time = yes
					}
				}
			}
			if = {
				limit = {
					check_variable = {medium_ship_production_array^num > 0}
					is_ai = yes
				}
				## find highest need medium_ship_one
				set_variable = {medium_ship_workers = 25000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = ship_amount_contract_holder@var:medium_ship_selected_item^num}
				for_each_loop = {
					array = medium_ship_production_array
					value = item_to_look_for
					break = break
					index = current_index
					set_temp_variable = {grab_ship_number = medium_ship_production_array^current_index}
					if = {
						limit = {
							check_variable = {ship_amount_contract_holder@var:grab_ship_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = ship_amount_contract_holder@var:grab_ship_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								check_variable = {current_production_value = 0}
								NOT = {
									has_variable = medium_ship_selected_item
								}
							}
						}
						set_variable = {medium_ship_selected_item = medium_ship_production_array^storing_current_index}
						set_variable = {medium_selected_ship_to_be_reduced = global.ship_ic_holder@medium_ship_selected_item}
						recalculate_medium_ship_creation_time = yes
					}
				}
			}
			if = {
				limit = {
					check_variable = {heavy_ship_production_array^num > 0}
					is_ai = yes
				}
				## find highest need heavy_ship_one
				set_variable = {heavy_ship_workers = 25000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = ship_amount_contract_holder@var:heavy_ship_selected_item^num}
				for_each_loop = {
					array = heavy_ship_production_array
					value = item_to_look_for
					break = break
					index = current_index
					set_temp_variable = {grab_ship_number = heavy_ship_production_array^current_index}
					if = {
						limit = {
							check_variable = {ship_amount_contract_holder@var:grab_ship_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = ship_amount_contract_holder@var:grab_ship_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								check_variable = {current_production_value = 0}
								NOT = {
									has_variable = heavy_ship_selected_item
								}
							}
						}
						set_variable = {heavy_ship_selected_item = heavy_ship_production_array^storing_current_index}
						set_variable = {heavy_selected_ship_to_be_reduced = global.ship_ic_holder@heavy_ship_selected_item}
						recalculate_heavy_ship_creation_time = yes
					}
				}
			}
			if = {
				limit = {
					check_variable = {air_production_array^num > 0}
					is_ai = yes
				}
				set_variable = {air_1_workers = 10000}
				set_variable = {air_2_workers = 10000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = starfighter_amount_contract_holder@var:air_1_selected_item^num}
				for_each_loop = {
					array = air_production_array
					break = break
					index = current_index
					set_temp_variable = {grab_item_number = air_production_array^current_index}
					if = {
						limit = {
							check_variable = {starfighter_amount_contract_holder@var:grab_item_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = starfighter_amount_contract_holder@var:grab_item_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								check_variable = {current_production_value = 0}
								NOT = {
									has_variable = air_1_selected_item
								}
							}
						}
						set_variable = {air_1_selected_item = air_production_array^storing_current_index}
						set_variable = {air_2_selected_item = air_production_array^storing_current_index}
						recalculate_air_1_creation_amount = yes
						recalculate_air_2_creation_amount = yes
					}
				}
			}
			if = {
				limit = {
					check_variable = {land_production_array^num > 0}
					is_ai = yes
				}
				set_variable = {land_1_workers = 30000}
				set_variable = {land_2_workers = 30000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = tank_amount_contract_holder@var:land_1_selected_item^num}
				for_each_loop = {
					array = land_production_array
					break = break
					index = current_index
					set_temp_variable = {grab_item_number = land_production_array^current_index}
					if = {
						limit = {
							check_variable = {tank_amount_contract_holder@var:grab_item_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = tank_amount_contract_holder@var:grab_item_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								check_variable = {current_production_value = 0}
								NOT = {
									has_variable = land_1_selected_item
								}
							}
						}
						set_variable = {land_1_selected_item = land_production_array^storing_current_index}
						set_variable = {land_2_selected_item = land_production_array^storing_current_index}
						recalculate_land_1_creation_amount = yes
						recalculate_land_2_creation_amount = yes
					}
				}
			}
			if = {
				limit = {
					check_variable = {soft_production_array^num > 0}
					is_ai = yes
				}
				set_variable = {soft_1_workers = 13000}
				set_variable = {soft_2_workers = 13000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = soft_amount_contract_holder@var:soft_1_selected_item^num}
				for_each_loop = {
					array = soft_production_array
					break = break
					index = current_index
					set_temp_variable = {grab_item_number = soft_production_array^current_index}
					if = {
						limit = {
							check_variable = {soft_amount_contract_holder@var:grab_item_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = soft_amount_contract_holder@var:grab_item_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								check_variable = {current_production_value = 0}
								NOT = {
									has_variable = soft_1_selected_item
								}
							}
						}
						set_variable = {soft_1_selected_item = soft_production_array^storing_current_index}
						set_variable = {soft_2_selected_item = soft_production_array^storing_current_index}
						recalculate_soft_1_creation_amount = yes
						recalculate_soft_2_creation_amount = yes
					}
				}
			}
		}
	}

	## NEW MARKET ON ACTIONS
	on_daily = { ## I tried making them were the scripted gui but ai makes my brain hurt
		## THIS SETS A EQUIPMENT TO BE PURCHASED EVERY DAY UP TO A QUANTITY BASED ON HOW MUCH THE COUNTRY HAS DECIDED IT CAN SPEND (this is linked to the building system)
		effect = {
			if = {
				limit = {
					is_ai = yes
				}
				set_variable = {what_we_buying_today = 0}
				set_temp_variable = {what_to_buy_today_compare_variable = 0}
				for_each_loop = {
					array = current_selected_market_category_array
					value = current_selected_item
					index = i
					
					set_temp_variable = {temporary_compare = num_equipment@var:current_selected_item}
					divide_temp_variable = {temporary_compare = maxium_stockpile@var:current_selected_item}

					if = {
						limit = {
							check_variable = {what_to_buy_today_compare_variable > temporary_compare}
						}
						set_variable = {what_to_buy_today = temp_item}
						set_temp_variable = {what_to_buy_today_compare_variable = temporary_compare}
					}
				}
				set_temp_variable = {item_to_buy = what_to_buy_today}
				set_temp_variable = {amount_to_purchase = equipment_money_chest_amount}
				divide_temp_variable = {amount_to_purchase = global.price_of_item_@var:item_to_buy}
				round_temp_variable = amount_to_purchase
				multiply_temp_variable = {amount_to_purchase = 100}

				## buy action
				set_temp_variable = {amount_checker = amount_to_purchase}
				if = {
					limit = {
						set_temp_variable = {money_to_pass = currency_amount^primary_currency}
						set_temp_variable = {total_price = global.price_of_item_@var:item_to_buy}
						multiply_temp_variable = {total_price = amount_to_purchase}
						check_variable = { money_to_pass > total_price}
						check_variable = {global.stock_of_item@var:item_to_buy > amount_checker}
					}
					buy_item_scripted_effect = yes
				}
			}

		}
	}
	on_monthly = {
		effect = {
			## re calculates maxium_stockpile
			recalculate_maxium_stockpile = yes ## this effect is also used for ai nations on declairation of war (or lead up to war if wanted by devs) to make stockpiles bigger
		}
	}
	on_monthly_VON = {
		## THIS monthly on action removes ai desire for technology that should be outdated by this point

		effect = {
			if = {
				limit = {	
					date > 05.12.01
					NOT = {
						has_country_flag = year_2_desire_reduction_done
					}
				}
				set_country_flag = year_2_desire_reduction_done


				set_variable = {wanted_base@token:at_at_chassis_0 = 0}
				

			}
			if = {
				limit = {	
					date > 06.12.01
					NOT = {
						has_country_flag = year_3_desire_reduction_done
					}
				}
				set_country_flag = year_3_desire_reduction_done
			}
			if = {
				limit = {	
					date > 07.12.01
					NOT = {
						has_country_flag = year_4_desire_reduction_done
					}
				}
				set_country_flag = year_4_desire_reduction_done
			}
			if = {
				limit = {	
					date > 08.12.01
					NOT = {
						has_country_flag = year_5_desire_reduction_done
					}
				}
				set_country_flag = year_5_desire_reduction_done
			}
			if = {
				limit = {	
					date > 09.12.01
					NOT = {
						has_country_flag = year_6_desire_reduction_done
					}
				}
				set_country_flag = year_6_desire_reduction_done

			}
			if = {
				limit = {	
					date > 10.12.01
					NOT = {
						has_country_flag = year_7_desire_reduction_done
					}
				}
				set_country_flag = year_7_desire_reduction_done

			}
			if = {
				limit = {	
					date > 11.12.01
					NOT = {
						has_country_flag = year_8_desire_reduction_done
					}
				}
				set_country_flag = year_8_desire_reduction_done

			}
			if = {
				limit = {	
					date > 12.12.01
					NOT = {
						has_country_flag = year_9_desire_reduction_done
					}
				}
				set_country_flag = year_9_desire_reduction_done

			}
			if = {
				limit = {	
					date > 13.12.01
					NOT = {
						has_country_flag = year_10_desire_reduction_done
					}
				}
				set_country_flag = year_10_desire_reduction_done

			}
		}
	}
	on_startup = {
		### Specifying behaviour, whos trying to buy what###

			## Behavior 1 - country with no money, buys inf equipment, artillery and anti tank (cheap units)

			## Behavior 2 - country with no money, buys cheap tanks and aims to overwhelm

			## Behavior 3 - Country with med money, buys inf equipment and light tanks, corvettes and frigates and fighterbombers (eg xwing)

			## Behavior 4 - Country with high money and Rep leaning, buys airplanes and medium tanks, skewed towards carriers,light cruisers frigates and fighterbombers

			## Behaviour 5 - Country with high money and Emp leaning, inf and heavy tanks, skewed towards,isds, heavy cruisers and corvettes and fighters and bombers seperatly 

			## Custom behaviours - programmed by dev to better represent their wanted equipment
		effect = {
			evaluate_behaviour = yes





			### CUSTOM BEHAVIOUR EXAMPLE, YOU MUST INCLUDE ALL THE EQUIPMENT YOU WANT (Minus that of infantry equipment, artillery and support equipment which is standard)
			EMP = { ## We want a fuckton of at ats
				add_to_array = {
					array = ai_wanted_equipment
					value = token:at_at_chassis_0
				}
			}


		}
	}

}