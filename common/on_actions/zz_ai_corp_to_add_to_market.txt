on_actions = {
	on_startup = {
		effect = {
			ai_corp_set_tech_for_start = yes
		### Specifying behaviour, whos trying to buy what###

			## Behavior 1 - country with no money, buys inf equipment, artillery and anti tank (cheap units)

			## Behavior 2 - country with no money, buys cheap tanks and aims to overwhelm

			## Behavior 3 - Country with med money, buys inf equipment and light tanks, corvettes and frigates and fighterbombers (eg xwing)

			## Behavior 4 - Country with high money and Rep leaning, buys airplanes and medium tanks, skewed towards carriers,light cruisers frigates and fighterbombers

			## Behaviour 5 - Country with high money and Emp leaning, inf and heavy tanks, skewed towards,isds, heavy cruisers and corvettes and fighters and bombers seperatly 

			## Custom behaviours - programmed by dev to better represent their wanted equipment
			evaluate_behaviour = yes
		}
	}
	on_daily = { ## REEVALUATE PRODUCTION
		effect = {
			if = {
				limit = {
					check_variable = {light_ship_production_array^num > 0}
					is_ai = yes
				}
				## find highest need light_ship_one
				set_variable = {light_ship_workers = 25000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = ship_amount_contract_holder@var:light_ship_selected_item^num}
				for_each_loop = {
					array = light_ship_production_array
					value = item_to_look_for
					break = break
					index = current_index
					set_temp_variable = {grab_ship_number = light_ship_production_array^current_index}
					if = {
						limit = {
							check_variable = {ship_amount_contract_holder@var:grab_ship_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = ship_amount_contract_holder@var:grab_ship_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								NOT = {
									has_variable = light_ship_selected_item
								}
							}
						}
						set_variable = {light_ship_selected_item = light_ship_production_array^storing_current_index}
						set_variable = {light_selected_ship_to_be_reduced = global.ship_ic_holder@light_ship_selected_item}
						recalculate_light_ship_creation_time = yes
					}
				}
			}
			if = {
				limit = {
					check_variable = {medium_ship_production_array^num > 0}
					is_ai = yes
				}
				## find highest need medium_ship_one
				set_variable = {medium_ship_workers = 25000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = ship_amount_contract_holder@var:medium_ship_selected_item^num}
				for_each_loop = {
					array = medium_ship_production_array
					value = item_to_look_for
					break = break
					index = current_index
					set_temp_variable = {grab_ship_number = medium_ship_production_array^current_index}
					if = {
						limit = {
							check_variable = {ship_amount_contract_holder@var:grab_ship_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = ship_amount_contract_holder@var:grab_ship_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								check_variable = {current_production_value = 0}
								NOT = {
									has_variable = medium_ship_selected_item
								}
							}
						}
						set_variable = {medium_ship_selected_item = medium_ship_production_array^storing_current_index}
						set_variable = {medium_selected_ship_to_be_reduced = global.ship_ic_holder@medium_ship_selected_item}
						recalculate_medium_ship_creation_time = yes
					}
				}
			}
			if = {
				limit = {
					check_variable = {heavy_ship_production_array^num > 0}
					is_ai = yes
				}
				## find highest need heavy_ship_one
				set_variable = {heavy_ship_workers = 25000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = ship_amount_contract_holder@var:heavy_ship_selected_item^num}
				for_each_loop = {
					array = heavy_ship_production_array
					value = item_to_look_for
					break = break
					index = current_index
					set_temp_variable = {grab_ship_number = heavy_ship_production_array^current_index}
					if = {
						limit = {
							check_variable = {ship_amount_contract_holder@var:grab_ship_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = ship_amount_contract_holder@var:grab_ship_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								check_variable = {current_production_value = 0}
								NOT = {
									has_variable = heavy_ship_selected_item
								}
							}
						}
						set_variable = {heavy_ship_selected_item = heavy_ship_production_array^storing_current_index}
						set_variable = {heavy_selected_ship_to_be_reduced = global.ship_ic_holder@heavy_ship_selected_item}
						recalculate_heavy_ship_creation_time = yes
					}
				}
			}
			if = {
				limit = {
					check_variable = {air_production_array^num > 0}
					is_ai = yes
				}
				set_variable = {air_1_workers = 10000}
				set_variable = {air_2_workers = 10000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = starfighter_amount_contract_holder@var:air_1_selected_item^num}
				for_each_loop = {
					array = air_production_array
					break = break
					index = current_index
					set_temp_variable = {grab_item_number = air_production_array^current_index}
					if = {
						limit = {
							check_variable = {starfighter_amount_contract_holder@var:grab_item_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = starfighter_amount_contract_holder@var:grab_item_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								check_variable = {current_production_value = 0}
								NOT = {
									has_variable = air_1_selected_item
								}
							}
						}
						set_variable = {air_1_selected_item = air_production_array^storing_current_index}
						set_variable = {air_2_selected_item = air_production_array^storing_current_index}
						recalculate_air_1_creation_amount = yes
						recalculate_air_2_creation_amount = yes
					}
				}
			}
			if = {
				limit = {
					check_variable = {land_production_array^num > 0}
					is_ai = yes
				}
				set_variable = {land_1_workers = 30000}
				set_variable = {land_2_workers = 30000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = tank_amount_contract_holder@var:land_1_selected_item^num}
				for_each_loop = {
					array = land_production_array
					break = break
					index = current_index
					set_temp_variable = {grab_item_number = land_production_array^current_index}
					if = {
						limit = {
							check_variable = {tank_amount_contract_holder@var:grab_item_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = tank_amount_contract_holder@var:grab_item_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								check_variable = {current_production_value = 0}
								NOT = {
									has_variable = land_1_selected_item
								}
							}
						}
						set_variable = {land_1_selected_item = land_production_array^storing_current_index}
						set_variable = {land_2_selected_item = land_production_array^storing_current_index}
						recalculate_land_1_creation_amount = yes
						recalculate_land_2_creation_amount = yes
					}
				}
			}
			if = {
				limit = {
					check_variable = {soft_production_array^num > 0}
					is_ai = yes
				}
				set_variable = {soft_1_workers = 13000}
				set_variable = {soft_2_workers = 13000}
				set_temp_variable = {highest_so_far = 0}
				set_temp_variable = {storing_current_index = 0}
				set_temp_variable = {current_production_value = soft_amount_contract_holder@var:soft_1_selected_item^num}
				for_each_loop = {
					array = soft_production_array
					break = break
					index = current_index
					set_temp_variable = {grab_item_number = soft_production_array^current_index}
					if = {
						limit = {
							check_variable = {soft_amount_contract_holder@var:grab_item_number^num > highest_so_far }
						}
						set_temp_variable = {highest_so_far = soft_amount_contract_holder@var:grab_item_number^num}
						set_temp_variable = {storing_current_index = current_index}
					}
				}
				if = {
					limit = {
						check_variable = {
							var = highest_so_far
							value = 0
							compare = not_equals
						}
					}
					if = {
						limit = {
							check_variable = {
								var = current_production_value
								value = 0
								compare = not_equals
							}
						}
						divide_temp_variable = {highest_so_far = current_production_value}
					}
					if = {
						limit = {
							or = {
								check_variable = {highest_so_far > 2}
								check_variable = {current_production_value = 0}
								NOT = {
									has_variable = soft_1_selected_item
								}
							}
						}
						set_variable = {soft_1_selected_item = soft_production_array^storing_current_index}
						set_variable = {soft_2_selected_item = soft_production_array^storing_current_index}
						recalculate_soft_1_creation_amount = yes
						recalculate_soft_2_creation_amount = yes
					}
				}
			}
		}
	}

	## NEW MARKET ON ACTIONS
	# on_daily = { ## I tried making them were the scripted gui but ai makes my brain hurt
	# 	## THIS SETS A EQUIPMENT TO BE PURCHASED EVERY DAY UP TO A QUANTITY BASED ON HOW MUCH THE COUNTRY HAS DECIDED IT CAN SPEND (this is linked to the building system)
	# 	effect = {
	# 		if = {
	# 			limit = {
	# 				is_ai = yes
	# 			}
	# 			set_variable = {what_we_buying_today = 0}
	# 			set_temp_variable = {what_to_buy_today_compare_variable = 0}
	# 			for_each_loop = {
	# 				array = current_selected_market_category_array
	# 				value = current_selected_item
	# 				index = i
					
	# 				set_temp_variable = {temporary_compare = num_equipment@var:current_selected_item}
	# 				divide_temp_variable = {temporary_compare = maxium_stockpile@var:current_selected_item}

	# 				if = {
	# 					limit = {
	# 						check_variable = {what_to_buy_today_compare_variable > temporary_compare}
	# 					}
	# 					set_variable = {what_to_buy_today = temp_item}
	# 					set_temp_variable = {what_to_buy_today_compare_variable = temporary_compare}
	# 				}
	# 			}
	# 			set_temp_variable = {item_to_buy = what_to_buy_today}
	# 			set_temp_variable = {amount_to_purchase = equipment_money_chest_amount}
	# 			divide_temp_variable = {amount_to_purchase = global.price_of_item_@var:item_to_buy}
	# 			round_temp_variable = amount_to_purchase
	# 			multiply_temp_variable = {amount_to_purchase = 100}

	# 			## buy action
	# 			set_temp_variable = {amount_checker = amount_to_purchase}
	# 			if = {
	# 				limit = {
	# 					set_temp_variable = {money_to_pass = currency_amount^primary_currency}
	# 					set_temp_variable = {total_price = global.price_of_item_@var:item_to_buy}
	# 					multiply_temp_variable = {total_price = amount_to_purchase}
	# 					check_variable = { money_to_pass > total_price}
	# 					check_variable = {global.stock_of_item@var:item_to_buy > amount_checker}
	# 				}
	# 				buy_item_scripted_effect = yes
	# 			}
	# 		}

	# 	}
	# }
	on_weekly = {
		effect = {
			if = {
				limit = {
					is_ai = yes
				}
				recalculate_maxium_stockpile = yes
			}
			if = {
				limit = {
					is_ai = yes
				}
				set_temp_variable = {held_lowest_percentage_stockpile_amount = 5}
				for_each_loop = {
					array = current_selected_market_category_array
					value = item_to_buy
					index = current_index

					## compare to maxium amount
					set_temp_variable = {name_of_item_currently_selected = current_selected_market_category_array^i}
					set_temp_variable = {maxium_stockpile_amount = maxium_stockpile@var:item_to_buy}
					if = {
						limit = {
							NOT = {
								am_i_a_ship = yes
							}
						}
						set_temp_variable = {temp_equipment_in_stockpile = num_equipment@var:item_to_buy}
					}else = {
						if = {
							limit = {
								check_variable = {category_of_market_item@var:item_to_buy = global.corvette_identifier}
							}
							set_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@screen}
						}else_if = {
							limit = {
								check_variable = {category_of_market_item@var:item_to_buy = global.frigate_light_cruiser_identifier}
							}
							set_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@screen}
							if = {
								limit = {
									check_variable = {item_to_buy = token:quaser_1}
								}
								add_to_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@carrier}
							}
						}else_if = {
							limit = {
								check_variable = {category_of_market_item@var:item_to_buy = global.heavy_cruiser_identifier}
							}
							set_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@capital}
						}else = {
							set_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@capital}
							add_to_temp_variable = {temp_equipment_in_stockpile = num_ships_with_type@carrier}
						}
					}
					divide_temp_variable = {temp_equipment_in_stockpile = maxium_stockpile_amount}
					set_temp_variable = {maxium_stockpile_amount = 1}
					subtract_from_temp_variable = {maxium_stockpile_amount = temp_equipment_in_stockpile}
					set_temp_variable = {percentage_of_max_stockpile = maxium_stockpile_amount}
					set_variable_to_random = {
						var = random_error
						min = -0.003
						max = 0.003
						integer = no
					}
					## Introduce random probability in order for it to not always buy the same tank or airplane
					add_to_temp_variable = {percentage_of_max_stockpile = random_error}
					if = {
						limit = {
							check_variable = {held_lowest_percentage_stockpile_amount > percentage_of_max_stockpile}
						}
						# log = "Do I switch ever [?held_lowest_percentage_stockpile_amount]"
						# log = "and [?percentage_of_max_stockpile]"
						set_variable = {held_lowest_percentage_stockpile_amount = percentage_of_max_stockpile}
						set_variable = {lowest_index_stockpile_amount = current_index}
					}
				}
			}
		}
	}

	on_daily = {
		effect = {
			## BUYING ITEMS TEST
			
			if = {
				limit = {
					is_ai = yes
				}
				# log = "[?current_selected_market_category_array^lowest_index_stockpile_amount.GetTokenKey]"
					## WE HAVE WORKED OUT LOWEST STOCKPILE, now we buy equipment

				set_temp_variable = {item_to_buy = current_selected_market_category_array^lowest_index_stockpile_amount}
				set_temp_variable = {amount_to_purchase = 1}
				set_temp_variable = {amount_checker = amount_to_purchase}
				if = {
					limit = {
						NOT = {
							am_i_a_ship = yes
						}
					}
					multiply_temp_variable = {amount_checker = 100}
				}
				if = {
					limit = {
						set_temp_variable = {money_to_pass = currency_amount^primary_currency}
						set_temp_variable = {total_price = global.price_of_item_@var:item_to_buy}
						multiply_temp_variable = {total_price = amount_to_purchase}
						check_variable = { money_to_pass > total_price}
						check_variable = {global.stock_of_item@var:item_to_buy > amount_checker}
					}
					buy_item_scripted_effect = yes
				}
			}
		}
	}
	on_monthly = {
		effect = {
			if = {
				limit = {
					is_ai = yes
				}
				set_country_flag = open_buying_market_menu
				create_new_category_for_market_ai_version = yes
				### AI BUYING EQUIPMENT
				evaluate_behaviour = yes
				## INF EQUIPMENT DESIRE TO BUY
					## VARIABLE INF_EQUIPMENT_DESIRE
				## TANKS
					## VARIABLE TANK_EQUIPMENT_DESIRE
				## AIR
					## VARIABLE AIR_EQUIPMENT_DESIRE
				## NAVAL
					## VARIABLE NAVAL_EQUIPMENT_DESIRE
				## CUSTOM DESIRES
			}
		}
	}
	on_monthly_VON = {
		## THIS monthly on action removes ai desire for technology that should be outdated by this point

		effect = {
			if = {
				limit = {	
					date > 05.12.01
					NOT = {
						has_country_flag = year_2_desire_reduction_done
					}
				}
				set_country_flag = year_2_desire_reduction_done


				set_variable = {wanted_base@token:at_at_chassis_0 = 0}
				

			}
			if = {
				limit = {	
					date > 06.12.01
					NOT = {
						has_country_flag = year_3_desire_reduction_done
					}
				}
				set_country_flag = year_3_desire_reduction_done
			}
			if = {
				limit = {	
					date > 07.12.01
					NOT = {
						has_country_flag = year_4_desire_reduction_done
					}
				}
				set_country_flag = year_4_desire_reduction_done
			}
			if = {
				limit = {	
					date > 08.12.01
					NOT = {
						has_country_flag = year_5_desire_reduction_done
					}
				}
				set_country_flag = year_5_desire_reduction_done
			}
			if = {
				limit = {	
					date > 09.12.01
					NOT = {
						has_country_flag = year_6_desire_reduction_done
					}
				}
				set_country_flag = year_6_desire_reduction_done

			}
			if = {
				limit = {	
					date > 10.12.01
					NOT = {
						has_country_flag = year_7_desire_reduction_done
					}
				}
				set_country_flag = year_7_desire_reduction_done

			}
			if = {
				limit = {	
					date > 11.12.01
					NOT = {
						has_country_flag = year_8_desire_reduction_done
					}
				}
				set_country_flag = year_8_desire_reduction_done

			}
			if = {
				limit = {	
					date > 12.12.01
					NOT = {
						has_country_flag = year_9_desire_reduction_done
					}
				}
				set_country_flag = year_9_desire_reduction_done

			}
			if = {
				limit = {	
					date > 13.12.01
					NOT = {
						has_country_flag = year_10_desire_reduction_done
					}
				}
				set_country_flag = year_10_desire_reduction_done

			}
		}
	}
	on_weekly = {
		effect = {
			## ADDING A NEW FACTORY TO LINE
			if = {
				limit = {
					check_variable = {free_naval_corporate_shipyards > 0}
				}
				for_each_loop = {
					array = Production_array@var:global.naval_market_category
					value = current_item_we_are_looking_at
					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at > quartely_cost@var:current_item_we_are_looking_at}
						}
						## compare quartley income to next worst quartely income
						set_temp_variable = {temp_quartely_profit = quartely_revenue@var:current_item_we_are_looking_at}
						subtract_from_temp_variable = {temp_quartely_profit = quartely_cost@var:current_item_we_are_looking_at}
						if = {
							limit = {
								check_variable = {temp_quartely_profit > highest_profit_in_list}
							}
							set_temp_variable = {highest_profit_in_list = temp_quartely_profit}
							set_temp_variable = {best_performing_item = current_item_we_are_looking_at}
						}
					}
				}
				while_loop_effect = {
					limit = {
						check_variable = {free_naval_corporate_shipyards > 0}
					}
					add_to_variable = {factories_on_item@var:best_performing_item = 1}
					set_temp_variable = {production_efficency_loss_percentage = 1}
					divide_temp_variable = {production_efficency_loss_percentage = factories_on_item@var:best_performing_item}
					set_temp_variable = {production_efficency_loss_actual = 1}
					subtract_from_temp_variable = { production_efficency_loss_actual = production_efficency_loss_percentage}
					multiply_variable = {production_efficiency@var:best_performing_item = production_efficency_loss_actual}
					subtract_from_variable = {free_naval_corporate_shipyards = 1}
				}
			}
			set_temp_variable = {highest_profit_in_list = 0}
			set_temp_variable = {best_performing_item = 0}
			###
			if = {
				limit = {
					check_variable = {free_air_corporate_shipyards > 0}
				}
				for_each_loop = {
					array = Production_array@var:global.air_market_category
					value = current_item_we_are_looking_at
					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at > quartely_cost@var:current_item_we_are_looking_at}
						}
						## compare quartley income to next worst quartely income
						set_temp_variable = {temp_quartely_profit = quartely_revenue@var:current_item_we_are_looking_at}
						subtract_from_temp_variable = {temp_quartely_profit = quartely_cost@var:current_item_we_are_looking_at}
						if = {
							limit = {
								check_variable = {temp_quartely_profit > highest_profit_in_list}
							}
							set_temp_variable = {highest_profit_in_list = temp_quartely_profit}
							set_temp_variable = {best_performing_item = current_item_we_are_looking_at}
						}
					}
				}
				while_loop_effect = {
					limit = {
						check_variable = {free_air_corporate_shipyards > 0}
					}
					add_to_variable = {factories_on_item@var:best_performing_item = 1}
					set_temp_variable = {production_efficency_loss_percentage = 1}
					divide_temp_variable = {production_efficency_loss_percentage = factories_on_item@var:best_performing_item}
					set_temp_variable = {production_efficency_loss_actual = 1}
					subtract_from_temp_variable = { production_efficency_loss_actual = production_efficency_loss_percentage}
					multiply_variable = {production_efficiency@var:best_performing_item = production_efficency_loss_actual}
					subtract_from_variable = {free_air_corporate_shipyards = 1}
				}
			}
			set_temp_variable = {highest_profit_in_list = 0}
			set_temp_variable = {best_performing_item = 0}
			###
			if = {
				limit = {
					check_variable = {free_land_corporate_shipyards > 0}
				}
				for_each_loop = {
					array = Production_array@var:global.land_market_category
					value = current_item_we_are_looking_at
					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at > quartely_cost@var:current_item_we_are_looking_at}
						}
						## compare quartley income to next worst quartely income
						set_temp_variable = {temp_quartely_profit = quartely_revenue@var:current_item_we_are_looking_at}
						subtract_from_temp_variable = {temp_quartely_profit = quartely_cost@var:current_item_we_are_looking_at}
						if = {
							limit = {
								check_variable = {temp_quartely_profit > highest_profit_in_list}
							}
							set_temp_variable = {highest_profit_in_list = temp_quartely_profit}
							set_temp_variable = {best_performing_item = current_item_we_are_looking_at}
						}
					}
				}
			}
			###
			if = {
				limit = {
					check_variable = {free_land_corporate_shipyards > 0}
				}
				for_each_loop = {
					array = Production_array@var:global.tank_market_category
					value = current_item_we_are_looking_at
					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at > quartely_cost@var:current_item_we_are_looking_at}
						}
						## compare quartley income to next worst quartely income
						set_temp_variable = {temp_quartely_profit = quartely_revenue@var:current_item_we_are_looking_at}
						subtract_from_temp_variable = {temp_quartely_profit = quartely_cost@var:current_item_we_are_looking_at}
						if = {
							limit = {
								check_variable = {temp_quartely_profit > highest_profit_in_list}
							}
							set_temp_variable = {highest_profit_in_list = temp_quartely_profit}
							set_temp_variable = {best_performing_item = current_item_we_are_looking_at}
						}
					}
				}
				while_loop_effect = {
					limit = {
						check_variable = {free_land_corporate_shipyards > 0}
					}
					add_to_variable = {factories_on_item@var:best_performing_item = 1}
					set_temp_variable = {production_efficency_loss_percentage = 1}
					divide_temp_variable = {production_efficency_loss_percentage = factories_on_item@var:best_performing_item}
					set_temp_variable = {production_efficency_loss_actual = 1}
					subtract_from_temp_variable = { production_efficency_loss_actual = production_efficency_loss_percentage}
					multiply_variable = {production_efficiency@var:best_performing_item = production_efficency_loss_actual}
					subtract_from_variable = {free_land_corporate_shipyards = 1}
				}
			}
		}
	}
	on_monthly = {
		### DO YOU NEED TO REMOVE A FACTORY
		## Go through all items and compute if they are net loss from last quarter
		## Decide how bad of a net loss in terms of factories to decide how many factories to remove

		## Do we have a free factory from either removing or new factory built
		## add new factory to line that has a good quarter or this month profit

		## REMOVING FACTORY FROM PRODUCTION LINES
		effect = {
			if = {
				limit = {
					has_global_flag = month_three_of_stocks
					is_ai = yes
				}

				for_each_loop = {
					array = Production_array@var:global.naval_market_category
					value = current_item_we_are_looking_at

					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at < quartely_cost@var:current_item_we_are_looking_at}
							check_variable = {factories_on_item@var:current_item_we_are_looking_at > 1}
						}
						## DECIDE ON HOW BAD THE NET LOSS IS
						set_temp_variable = {quartely_cost_of_item = quartely_cost@var:current_item_we_are_looking_at}
						divide_temp_variable = {quartely_cost_of_item = global.CONSTANT_CORPORATE_FACTORY_COST}
						round_temp_variable = quartely_cost_of_item
						clamp_temp_variable = {
							var = quartely_cost_of_item
							min = 1
							max = 5
						}

						
						add_to_variable = {factories_on_item@var:current_item_we_are_looking_at = quartely_cost_of_item}
						add_to_variable = {free_naval_corporate_shipyards = quartely_cost_of_item}
					}
				}
				for_each_loop = {
					array = Production_array@var:global.land_market_category
					value = current_item_we_are_looking_at

					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at < quartely_cost@var:current_item_we_are_looking_at}
						}
						## DECIDE ON HOW BAD THE NET LOSS IS
						set_temp_variable = {quartely_cost_of_item = quartely_cost@var:current_item_we_are_looking_at}
						divide_temp_variable = {quartely_cost_of_item = global.CONSTANT_CORPORATE_FACTORY_COST}
						round_temp_variable = quartely_cost_of_item
						clamp_temp_variable = {
							var = quartely_cost_of_item
							min = 0
							max = 5
						}

						add_to_variable = {factories_on_item@var:current_item_we_are_looking_at = quartely_cost_of_item}
						add_to_variable = {free_naval_corporate_shipyards = quartely_cost_of_item}
					}
				}
				for_each_loop = {
					array = Production_array@var:global.tank_market_category
					value = current_item_we_are_looking_at

					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at < quartely_cost@var:current_item_we_are_looking_at}
						}
						## DECIDE ON HOW BAD THE NET LOSS IS
						set_temp_variable = {quartely_cost_of_item = quartely_cost@var:current_item_we_are_looking_at}
						divide_temp_variable = {quartely_cost_of_item = global.CONSTANT_CORPORATE_FACTORY_COST}
						round_temp_variable = quartely_cost_of_item
						clamp_temp_variable = {
							var = quartely_cost_of_item
							min = 0
							max = 5
						}

						add_to_variable = {factories_on_item@var:current_item_we_are_looking_at = quartely_cost_of_item}
						add_to_variable = {free_naval_corporate_shipyards = quartely_cost_of_item}
					}
				}
				for_each_loop = {
					array = Production_array@var:global.air_market_category
					value = current_item_we_are_looking_at

					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at < quartely_cost@var:current_item_we_are_looking_at}
						}
						## DECIDE ON HOW BAD THE NET LOSS IS
						set_temp_variable = {quartely_cost_of_item = quartely_cost@var:current_item_we_are_looking_at}
						divide_temp_variable = {quartely_cost_of_item = global.CONSTANT_CORPORATE_FACTORY_COST}
						round_temp_variable = quartely_cost_of_item
						clamp_temp_variable = {
							var = quartely_cost_of_item
							min = 0
							max = 5
						}

						add_to_variable = {factories_on_item@var:current_item_we_are_looking_at = quartely_cost_of_item}
						add_to_variable = {free_naval_corporate_shipyards = quartely_cost_of_item}
					}
				}
			}

			## every month run through all production and see if any have zero factories, 
			##if no factories spare, remove from lowest income (that more then one factory) factory line and place one factory on it#
			set_temp_variable = {lowest_profit_in_list = 0}
			set_temp_variable = {worst_performing_item = 0}
			for_each_loop = {
				array = Production_array@var:global.naval_market_category
				value = current_item_we_are_looking_at
				if = {
					limit = {
						check_variable = {factories_on_item@var:current_item_we_are_looking_at < 1}
						set_temp_variable = {needed_tech = global.required_researched_technology@var:current_item_we_are_looking_at?token:post_endor_survival}
						meta_trigger = {
							text = {
								has_tech = [TECH_HELD]
							}
							TECH_HELD = "[?needed_tech.GetTokenKey]"
						}
					}
					add_to_temp_array = {
						array = factories_with_no_current_production
						value = current_item_we_are_looking_at
					}
					## add factory
				}else_if = {
					limit = {
						check_variable = {factories_on_item@var:current_item_we_are_looking_at > 1}
					}
					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at > quartely_cost@var:current_item_we_are_looking_at}
							check_variable = {free_naval_corporate_shipyards < 1}
						}
						## compare quartley income to next worst quartely income
						set_temp_variable = {temp_quartely_profit = quartely_revenue@var:current_item_we_are_looking_at}
						subtract_from_temp_variable = {temp_quartely_profit = quartely_cost@var:current_item_we_are_looking_at}
						if = {
							limit = {
								check_variable = {temp_quartely_profit < lowest_profit_in_list}
							}
							set_temp_variable = {lowest_profit_in_list = temp_quartely_profit}
							set_temp_variable = {worst_performing_item = current_item_we_are_looking_at}
						}
					}
				}
			}
			if = {
				limit = {
					check_variable = {factories_with_no_current_production^num > 0}
				}
				for_each_loop = {
					array = factories_with_no_current_production
					value = current_item_we_are_looking_at

					if = {
						limit = {
							check_variable = {factories_on_item@var:worst_performing_item > 1}
						}
						add_to_variable = {factories_on_item@var:current_item_we_are_looking_at = 1}
						set_temp_variable = {production_efficency_loss_percentage = 1}
						divide_temp_variable = {production_efficency_loss_percentage = factories_on_item@var:current_item_we_are_looking_at}
						set_temp_variable = {production_efficency_loss_actual = 1}
						subtract_from_temp_variable = { production_efficency_loss_actual = production_efficency_loss_percentage}
						multiply_variable = {production_efficiency@var:item_id = production_efficency_loss_actual}

						add_to_variable = {factories_on_item@var:worst_performing_item = -1}
					}
				}
			}
			clear_temp_array = factories_with_no_current_production
			set_temp_variable = {lowest_profit_in_list = 0}
			set_temp_variable = {worst_performing_item = 0}
			#AIR
			for_each_loop = {
				array = Production_array@var:global.air_market_category
				value = current_item_we_are_looking_at
				if = {
					limit = {
						check_variable = {factories_on_item@var:current_item_we_are_looking_at < 1}
						set_temp_variable = {needed_tech = global.required_researched_technology@var:current_item_we_are_looking_at?token:post_endor_survival}
						meta_trigger = {
							text = {
								has_tech = [TECH_HELD]
							}
							TECH_HELD = "[?needed_tech.GetTokenKey]"
						}
					}
					add_to_temp_array = {
						array = factories_with_no_current_production
						value = current_item_we_are_looking_at
					}
					## add factory
				}else_if = {
					limit = {
						check_variable = {factories_on_item@var:current_item_we_are_looking_at > 1}
					}
					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at > quartely_cost@var:current_item_we_are_looking_at}
							check_variable = {free_air_corporate_shipyards < 1}
						}
						## compare quartley income to next worst quartely income
						set_temp_variable = {temp_quartely_profit = quartely_revenue@var:current_item_we_are_looking_at}
						subtract_from_temp_variable = {temp_quartely_profit = quartely_cost@var:current_item_we_are_looking_at}
						if = {
							limit = {
								check_variable = {temp_quartely_profit < lowest_profit_in_list}
							}
							set_temp_variable = {lowest_profit_in_list = temp_quartely_profit}
							set_temp_variable = {worst_performing_item = current_item_we_are_looking_at}
						}
					}
				}
			}
			if = {
				limit = {
					check_variable = {factories_with_no_current_production^num > 0}
				}
				for_each_loop = {
					array = factories_with_no_current_production
					value = current_item_we_are_looking_at

					if = {
						limit = {
							check_variable = {factories_on_item@var:worst_performing_item > 1}
						}
						add_to_variable = {factories_on_item@var:current_item_we_are_looking_at = 1}
						set_temp_variable = {production_efficency_loss_percentage = 1}
						divide_temp_variable = {production_efficency_loss_percentage = factories_on_item@var:current_item_we_are_looking_at}
						set_temp_variable = {production_efficency_loss_actual = 1}
						subtract_from_temp_variable = { production_efficency_loss_actual = production_efficency_loss_percentage}
						multiply_variable = {production_efficiency@var:item_id = production_efficency_loss_actual}

						add_to_variable = {factories_on_item@var:worst_performing_item = -1}
					}
				}
			}

			clear_temp_array = factories_with_no_current_production
			set_temp_variable = {lowest_profit_in_list = 0}
			set_temp_variable = {worst_performing_item = 0}
			#TANK
			for_each_loop = {
				array = Production_array@var:global.tank_market_category
				value = current_item_we_are_looking_at
				if = {
					limit = {
						check_variable = {factories_on_item@var:current_item_we_are_looking_at < 1}
						set_temp_variable = {needed_tech = global.required_researched_technology@var:current_item_we_are_looking_at?token:post_endor_survival}
						meta_trigger = {
							text = {
								has_tech = [TECH_HELD]
							}
							TECH_HELD = "[?needed_tech.GetTokenKey]"
						}
					}
					add_to_temp_array = {
						array = factories_with_no_current_production
						value = current_item_we_are_looking_at
					}
					## add factory
				}else_if = {
					limit = {
						check_variable = {factories_on_item@var:current_item_we_are_looking_at > 1}
					}
					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at > quartely_cost@var:current_item_we_are_looking_at}
							check_variable = {free_land_corporate_shipyards < 1}
						}
						## compare quartley income to next worst quartely income
						set_temp_variable = {temp_quartely_profit = quartely_revenue@var:current_item_we_are_looking_at}
						subtract_from_temp_variable = {temp_quartely_profit = quartely_cost@var:current_item_we_are_looking_at}
						if = {
							limit = {
								check_variable = {temp_quartely_profit < lowest_profit_in_list}
							}
							set_temp_variable = {lowest_profit_in_list = temp_quartely_profit}
							set_temp_variable = {worst_performing_item = current_item_we_are_looking_at}
						}
					}
				}
			}
			if = {
				limit = {
					check_variable = {factories_with_no_current_production^num > 0}
				}
				for_each_loop = {
					array = factories_with_no_current_production
					value = current_item_we_are_looking_at

					if = {
						limit = {
							check_variable = {factories_on_item@var:worst_performing_item > 1}
						}
						add_to_variable = {factories_on_item@var:current_item_we_are_looking_at = 1}
						set_temp_variable = {production_efficency_loss_percentage = 1}
						divide_temp_variable = {production_efficency_loss_percentage = factories_on_item@var:current_item_we_are_looking_at}
						set_temp_variable = {production_efficency_loss_actual = 1}
						subtract_from_temp_variable = { production_efficency_loss_actual = production_efficency_loss_percentage}
						multiply_variable = {production_efficiency@var:item_id = production_efficency_loss_actual}

						add_to_variable = {factories_on_item@var:worst_performing_item = -1}
					}
				}
			}

			clear_temp_array = factories_with_no_current_production
			set_temp_variable = {lowest_profit_in_list = 0}
			set_temp_variable = {worst_performing_item = 0}
			#land
			for_each_loop = {
				array = Production_array@var:global.land_market_category
				value = current_item_we_are_looking_at
				if = {
					limit = {
						check_variable = {factories_on_item@var:current_item_we_are_looking_at < 1}
						set_temp_variable = {needed_tech = global.required_researched_technology@var:current_item_we_are_looking_at?token:post_endor_survival}
						meta_trigger = {
							text = {
								has_tech = [TECH_HELD]
							}
							TECH_HELD = "[?needed_tech.GetTokenKey]"
						}
					}
					add_to_temp_array = {
						array = factories_with_no_current_production
						value = current_item_we_are_looking_at
					}
					## add factory
				}else_if = {
					limit = {
						check_variable = {factories_on_item@var:current_item_we_are_looking_at > 1}
					}
					if = {
						limit = {
							check_variable = {quartely_revenue@var:current_item_we_are_looking_at > quartely_cost@var:current_item_we_are_looking_at}
							check_variable = {free_land_corporate_shipyards < 1}
						}
						## compare quartley income to next worst quartely income
						set_temp_variable = {temp_quartely_profit = quartely_revenue@var:current_item_we_are_looking_at}
						subtract_from_temp_variable = {temp_quartely_profit = quartely_cost@var:current_item_we_are_looking_at}
						if = {
							limit = {
								check_variable = {temp_quartely_profit < lowest_profit_in_list}
							}
							set_temp_variable = {lowest_profit_in_list = temp_quartely_profit}
							set_temp_variable = {worst_performing_item = current_item_we_are_looking_at}
						}
					}
				}
			}
			if = {
				limit = {
					check_variable = {factories_with_no_current_production^num > 0}
				}
				for_each_loop = {
					array = factories_with_no_current_production
					value = current_item_we_are_looking_at

					if = {
						limit = {
							check_variable = {factories_on_item@var:worst_performing_item > 1}
						}
						add_to_variable = {factories_on_item@var:current_item_we_are_looking_at = 1}
						set_temp_variable = {production_efficency_loss_percentage = 1}
						divide_temp_variable = {production_efficency_loss_percentage = factories_on_item@var:current_item_we_are_looking_at}
						set_temp_variable = {production_efficency_loss_actual = 1}
						subtract_from_temp_variable = { production_efficency_loss_actual = production_efficency_loss_percentage}
						multiply_variable = {production_efficiency@var:item_id = production_efficency_loss_actual}

						add_to_variable = {factories_on_item@var:worst_performing_item = -1}
					}
				}
			}
		}
	}
}